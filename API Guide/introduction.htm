<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<title>Introduction</title>

<link href="help1.css" rel="stylesheet" type="text/css">
</head>
<body bgcolor="#FFFFFF" link=blue vlink="#606420" class="Normal" lang=EN-US>
<div>
  <p class="header">Introduction</p>
  </div>
<h2><a></a><a class="subhead">What are Web Services?</a></h2>
<p class="bodycopy"><i>Web services</i> are applications whose logic and functions 
  are accessible using standard Internet protocols and data formats such as Extensible 
  Markup Language (XML) over Hypertext Transfer Protocol (HTTP), and SOAP (Simple 
  Object Access Protocol). Like component-based development, Web services represent 
  black-box functionality that can be reused without worrying about how the service 
  is implemented. </p>
<p class="bodycopy">A Web service interface is defined strictly in terms of the 
  messages that the service accepts and generates. Applications using a Web Service 
  can be implemented on any platform in any programming language, as long as they 
  can create and consume messages defined for the service interface. A Web service 
  can also aggregate other services to provide a higher-level set of features. 
</p>
<p class="bodycopy">Why should developers be interested in Web services? </p>
<ul type=disc>
  <li class="bodycopy"><b>Interoperability</b> - Any Web service can interact 
    with any other Web service and can be written in any language. </li>
  <li class="bodycopy"><b>Ubiquity</b> - Web services communicate using HTTP and 
    XML. Any connected device that supports these technologies can both host and 
    access Web services.</li>
  <li class="bodycopy"><b>Low Barrier to Entry</b> - The concepts behind Web services 
    are easy to understand, and developers can quickly create and deploy them 
    using many tool-kits available on the web.</li>
  <li class="bodycopy"><b>Industry Support</b> - Major content providers and vendors 
    are supporting the Web services movement. </li>
</ul>
<p class="bodycopy">Most Web services make use of either SOAP or XML over HTTP 
  (also known as REST) to make requests and deliver responses via the Internet. 
</p>
<ul type=disc>
  <li class="bodycopy"><b><i>XML over HTTP</i></b> (or XML/HTTP) uses URLs with 
    specific name/value pairs to invoke methods and processes within Amazon.com's 
    Web Services framework. The URL is the primary method used for message passing. 
    Once the URL is processed, a well-formatted XML document is returned as a 
    response. Because XML/HTTP is based on such a widely accepted methodology, 
    most developers should have no problem creating applications capable of quickly 
    communicating with the Web services that expose this interface. </li>
  <li class="bodycopy"><b><i>SOAP</i></b> (Simple Object Access Protocol), a more 
    complex method of sharing messages between client and server, was developed 
    to deal with the limitations of XML/HTTP. SOAP is a lightweight protocol intended 
    for exchanging structured information in a decentralized, distributed environment. 
    It uses XML technologies to define an extensible messaging framework providing 
    a message construct that can be exchanged over a variety of underlying protocols. 
    The framework has been designed to be independent of any particular programming 
    model and other implementation-specific semantics. </li>
</ul>
<p class="bodycopy">Amazon.com Web Services offers developers the choice of XML/HTTP 
  or SOAP to access information in our catalog and databases. Which method should 
  you use? Mostly, it depends on what you are the most comfortable with. There 
  is significant industry debate over which Web Services method is the &quot;best&quot;; 
  at Amazon.com, we decided to take a neutral approach and offer access via both 
  methods. </p>

</body>
</html>
